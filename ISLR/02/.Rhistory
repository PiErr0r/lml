image(x, y, fa)
# perspective of the graph
persp(x, y, fa)
persp(x, y, fa, 30)
persp(x, y, fa, 20)
persp(x, y, fa, 30, 20)
persp(x, y, fa, theta=30, phi=20)
# perspective of the graph
persp(x, y, fa)
persp(x, y, fa, theta=30, phi=20)
persp(x, y, fa, theta=30, phi=70)
persp(x, y, fa, theta=50, phi=40)
# image - same as contour but with color - heatmap
image(x, y, fa)
persp(x, y, fa, theta=50, phi=40)
# internet example
persp(x, y, fa, theta=50, phi=40, shade=0.4, col="red")
persp(x, y, fa,
theta = 30, phi = 30, expand = 0.19, scale=FALSE,
shade=NA, col=colors[z.facet.range], border="grey80",
box=FALSE)
persp(x, y, fa,
theta = 30, phi = 30, expand = 0.19, scale=FALSE,
shade=NA, col=colors[fa.facet.range], border="grey80",
box=FALSE)
persp(x, y, fa,
theta = 30, phi = 30, expand = 0.19, scale=FALSE,
shade=NA, col="red", border="grey80",
box=FALSE)
persp(x, y, fa,
theta = 30, phi = 30, expand = 0.19, scale=FALSE,
shade=NA, col="red", border="red",
box=FALSE)
persp(x, y, fa,
theta = 30, phi = 30, expand = 0.19, scale=FALSE,
shade=0.4, col="red", border="red",
box=FALSE)
A = matrix(1:16, 4, 4)
A[2,3]
A[c(1, 3), c(2, 4)]
A
A[1:2,]
A[-c(1, 3),]
# dim() dimension
dim(A)
# dim() - dimension row, col
r, c = dim(A)
# dim() - dimension row, col
r c = dim(A)
# dim() - dimension row, col
[r, c] = dim(A)
# dim() - dimension row, col
a = dim(A)
a
a[0]
a(0)
# read.table() reads data while write.table() saves it
# use zix() to view the data in a window
# read.csv()
# na.omit() - remove missing data
# names() - get header names
# as.factor() - quantitative to qualitative
# hist() - histogram
# pairs() - scatterplot matrix
summary(A)
# read.table() reads data while write.table() saves it
# use zix() to view the data in a window
# read.csv()
# na.omit() - remove missing data
# names() - get header names
# as.factor() - quantitative to qualitative
# hist() - histogram
# pairs() - scatterplot matrix
plot(x, y)
# read.table() reads data while write.table() saves it
# use zix() to view the data in a window
# read.csv()
# na.omit() - remove missing data
# names() - get header names
# as.factor() - quantitative to qualitative
# hist() - histogram
# pairs() - scatterplot matrix
plot(xn, yn)
plot(xn, yn)
identify(xn, yn)
plot(xn, yn)
identify(xn, yn, xn
plot(xn, yn)
identify(xn, yn, xn)
save()
# Introduction
# help for function ?funcname - displayed in window on the right ==>
?c
# define a vector:
x <- c(1, 6, 2)
y <- c(1, 4, 5)
# len of vector
length(c(x, y))
# range
a = 1:10
# matrix stuff
m = matrix(1:4, 2, 2)
# byrow = TRUE
# creates the matrix row by row instead of col by col
m2 = matrix(1:4, 2, 2, TRUE)
# calcuations are made element by element
m ^ 2
sqrt(m)
# even when multiplying
m * m2
# random normal distribution of 50 elements
xn = rnorm(50)
# set up mean and standard deviation as you wish
yn = xn + rnorm(50, mean=50, sd=0.1)
# two types of calculating sd
sqrt(var(xn))
sd(xn)
# correlation
cor(xn, yn)
# seed for random variables - we always get same results
set.seed(1303)
rnorm(50)
# example
set.seed(3)
y = rnorm(100)
mean(y)
var(y)
###############################################################################
# Graphics
# create a scatterplot
x = rnorm(100)
y = rnorm(100)
plot(x, y)
# scatterplot with axis labels as well as the name of the plot
plot(x, y, xlab="x-axis", ylab="y-axis", main="Plot x vs y")
# pdf or jpeg to save the plot
# plot x vs y with dots colored green and save it as `Figure.pdf`
# dev.off -> stop recording and saving to `Figure`
pdf("Figure.pdf")
plot(x, y, col="green")
dev.off()
# sequence (same thing)
x = seq(1, 10)
x = 1:10
# digression - multiplication table
x %o% x
# sequence with len
x = seq(-pi, pi, length = 500)
# countour - 3d plot
y = x
f = outer(x, y, function(x, y)cos(y)/(1 + x ^ 2))
contour(x, y, f, nlevels=45, add=T)
fa = (f - t(f))/2
# image - same as contour but with color - heatmap
image(x, y, fa)
# perspective of the graph
persp(x, y, fa)
# theta - left/right)
# phi - up/dows
persp(x, y, fa, theta=30, phi=20)
persp(x, y, fa, theta=50, phi=40)
###############################################################################
# Indexing
A = matrix(1:16, 4, 4)
A[2,3]
# first and third row, second and fourth col
A[c(1, 3), c(2, 4)]
# all cols first two rows
A[1:2,]
# all cols and all rows **except** first and third
A[-c(1, 3),]
# dim() - dimension row, col
a = dim(A)
###############################################################################
# Load and save data
# read.table() reads data while write.table() saves it
# use zix() to view the data in a window
# read.csv()
# na.omit() - remove missing data
# names() - get header names
# as.factor() - quantitative to qualitative
# hist() - histogram
# pairs() - scatterplot matrix
# identify() starts the identification and after you are finished with clicking
#   click the finish button on the upper right corner to stop identification
#   and the dots you have clicked will have ther id (third parameter)
#   displayed by them
plot(xn, yn)
identify(xn, yn, xn)
# aummary of the variable
summary(A)
rm(list = ls())
college = read.csv("College.csv")
college[1,]
fix(college)
rownames(college)=college[,1]
college[1,]
college[,1]
college[0,]
college.rownames
fix(college)
college=college[,-1]
fix(college)
summary(college)
pairs(, 1:10)
pairs(college[, 1:10])
pairs(college[, 2:10])
plot(college$Private, college$Outstate)
plot(college$Outstate, college$Private)
library(vioplot)
boxplot(college$Outstate, college$Private)
c('No', 'Yes')[Private + 1]
c('No', 'Yes')[college$Private + 1]
priv = college$Private
priv <- priv == 'Yes'
priv
boxplot(college$Outstate, priv)
boxplot(priv, college$Outstate)
college$Outstate
boxplot(priv, college$Outstate, priv)
boxplot(college$Outstate, priv)
Elite = rep("No", nrow(college))
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite=as.factor(Elite)
Elite
?as.factor
plot(Elite, college$Outstate)
priv = as.factor(college$Private)
boxplot(college$Outstate, priv)
plot(college$Outstate, priv)
plot(priv, college$Outstate)
college=data.frame(college, Elite)
fix(college)
summary(college)
plot(Elite, college$Outstate)
# view the data
fix(college)
par(mfrow=c(2,2))
plot(Elite, college$Outstate)
par(mfrow=c(2,2))
plot(Elite, college$Outstate)
plot(Elite, college$Outstate)
plot(Elite, college$Outstate)
plot(Elite, college$Outstate)
par(mfrow=c(2,1))
plot(Elite, college$Outstate)
par(mfrow=c(1,2))
plot(Elite, college$Outstate)
par(mfrow=c(1,2))
plot(priv, college$Outstate)
plot(Elite, college$Outstate)
par(mfrow=c(1,2))
hist(priv, college$Outstate)
hist(Elite, college$Outstate)
p <- ifelse(priv == 'Yes', 1, 0)
e <- ifelse(Elite == 'Yes', 1, 0)
par(mfrow=c(1,2))
p <- ifelse(priv == 'Yes', 1, 0)
e <- ifelse(Elite == 'Yes', 1, 0)
hist(p, college$Outstate)
hist(e, college$Outstate)
p
e
hist(p, e)
hist(e, p)
p# view the data
hist(p, [1:length(p)])
hist(p, 1:length(p))
hist(p, 1:length(p)-1)
hist(1:length(p)-1, p)
hist(1:length(p), p)
hist(1:length(p) + 1, p)
hist(1:length(p) - 1, p)
hist(1:length(p), p)
hist(college$Apps, college$Accept)
plot(college$Apps, college$Accept)
plot(college$Apps, college$Accept)
# side by side binned data (binned = I guess yes/no but not sure)
par(mfrow=c(1,1))
plot(college$Apps, college$Accept)
plot(Elite, college$Accept)
par(mfrow=c(1,2))
plot(Elite, college$Top10perc)
plot(Elite, college$Top25perc)
install.packages("ISLR")
library(MASS)
library(ISLR)
rm(list = ls())
read.table("Auto.data")
Auto = read.table("Auto.data")
na.omit(Auto)
# view the data
fix(Auto)
# view the data
fix(Auto)
Auto[0, 9]
Auto[, 9]
rownames(college)=Auto[, 9]
rownames(Auto)=Auto[, 9]
fix(Auto)
rownames(Auto)=Auto[,9]
# view the data
fix(Auto)
range(Auto$V1)
range(Auto$V2)
# view the data
fix(Auto)
Auto[1,]
names(Auto) = Auto[1,]
# view the data
fix(Auto)
range(Auto$mpg)
Auto=Auto[-1,]
# view the data
fix(Auto)
Auto[0, 9]
Auto0, 9]
Auto[, 9]
rownames(Auto)=Auto[,9]
range(Auto$mpg)
range(Auto$cylinders)
range(Auto$horsepower)
# view the data
fix(Auto)
range(Auto$weight)
mean(Auto$weight)
as.factor(Auto)
mean(Auto$weight)
as.factor(Auto$weight)
mean(Auto$weight)
Auto$weight = as.factor(Auto$weight)
mean(Auto$weight)
Auto$weight
range(Auto$weight)
# init
Auto = read.table("Auto.data")
na.omit(Auto)
names(Auto) = Auto[1,]
Auto=Auto[-1,]
rownames(Auto)=Auto[,9]
range(Auto$weight)
Auto$weight = as.numeric(Auto$weight)
range(Auto$weight)
mean(Auto$weight)
Auto$mpg = as.numeric(Auto$mpg)
# view the data
fix(Auto)
Auto$cylinders = as.numeric(Auto$cylinders)
Auto$horsepower = as.numeric(Auto$horsepower)
# view the data
fix(Auto)
Auto$displacement = as.numeric(Auto$displacement)
Auto = as.numeric(Auto)
# view the data
fix(Auto)
Auto[,1:8] = as.numeric(Auto[,1:8])
sd(Auto$weight)
range(Auto$weight)
mean(Auto$weight)
sd(Auto$weight)
range(Auto$mpg)
range(Auto$mpg)
mean(Auto$mpg)
sd(Auto$mpg)
range(Auto$acceleration)
mean(Auto$acceleration)
sd(Auto$acceleration)
Auto$acceleration = as.numeric(Auto$acceleration)
range(Auto$acceleration)
mean(Auto$acceleration)
sd(Auto$acceleration)
pairs(Auto[, 1:8])
# view the data
fix(Auto)
pairs(Auto[, 1:6])
# load the data
library(MASS)
Boston
?Boston
dim(Boston)
fix(Boston)
pairs(Boston)
for(n in names(Boston)) {
plot(Boston$crim, Boston[n])
identify(Boston$crim, Boston[n], Boston[n])
}
a="crim"
Boston[a]
# view the data
fix(Boston)
pairs(Boston)
?Boston
?median
median(Boston$ptratio)
?Boston
mini = which.min(Boston$medv)
Boston[mini,]
a = c(1, 2)
a - 5
a - b
a = c(1, 2, 3, 4)
b = c(1, 2)
a - b
a = range(Boston$medv)
a
a[0]
a[1]
mini = which.min(Boston$medv)
suburb = Boston[mini,]
for (n in names(Boston)) {
rng = range(Boston[n])
suburb[n] - rng[1]
rng[2] suburn[n]
}
mini = which.min(Boston$medv)
suburb = Boston[mini,]
for (n in names(Boston)) {
rng = range(Boston[n])
suburb[n] - rng[1]
rng[2] suburb[n]
}
mini = which.min(Boston$medv)
suburb = Boston[mini,]
for (n in names(Boston)) {
rng = range(Boston[n])
suburb[n] - rng[1]
rng[2] - suburb[n]
}
for (n in names(Boston)) {
rng = range(Boston[n])
suburb[n] - rng[1]
rng[2] - suburb[n]
}
mini = which.min(Boston$medv)
suburb = Boston[mini,]
for (n in names(Boston)) {
rng = range(Boston[n]);
suburb[n] - rng[1];
rng[2] - suburb[n];
}
na.omit()na.omit()na.omit()
rng = range(Boston[n]);
suburb[n] - rng[1];
rng[2] - suburb[n];
for (n in names(Boston)) {
rng = range(Boston[n]);
suburb[n] - rng[1];
rng[2] - suburb[n];
}
# view the data
fix(Boston)
for (n in names(Boston)) {
rng = range(Boston[n]);
suburb[n] - rng[1];
rng[2] - suburb[n];
}
for (n in names(Boston)) {
rng = range(Boston[n]);
res = c(res, c(suburb[n] - rng[1], rng[2] - suburb[n]))
}
res = c()
for (n in names(Boston)) {
rng = range(Boston[n]);
res = c(res, c(suburb[n] - rng[1], rng[2] - suburb[n]))
}
res
fix(res)
#h
more_7 <- subset(Boston, Boston$rm > 7)
more_8 <- subset(Boston, Boston$rm > 8)
length(more_7)
length(more_8)
#h
more_7 <- subset(Boston, Boston$rm > 7)
more_8 <- subset(Boston, Boston$rm > 9)
length(more_7)
length(more_8)
#h
more_7 <- subset(Boston, Boston$rm > 7)
more_8 <- subset(Boston, Boston$rm > 15)
length(more_7)
length(more_8)
length(more_8)
Boston$rm
more_7 <- subset(Boston, Boston$rm > 7)
more_8 <- subset(Boston, Boston$rm > 15)
dim(more_7)
dim(more_8)
#h
more_7 <- subset(Boston, Boston$rm > 7)
more_8 <- subset(Boston, Boston$rm > 8)
dim(more_7)
dim(more_8)
more_7 <- subset(Boston, Boston$rm > 7)
more_8 <- subset(Boston, Boston$rm > 9)
dim(more_7)
dim(more_8)
pairs(more_8)
more_8
more_8 <- subset(Boston, Boston$rm > 8)
more_8
pairs(more_8)
min(Boston$black)
min(Boston$crim)
min(Boston$black)
min(Boston$crim)
max(Boston$black)
max(Boston$crim)
rm(l = ls())
rm(list = ls())
q()
